// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.Robotronix2017;

import org.usfirst.frc3550.Robotronix2017.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc3550.Robotronix2017.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick jPilote;
    public Joystick coPilote;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        jPilote = new Joystick(1);
        coPilote = new Joystick(0);
        
        
        Button button1 = new JoystickButton(jPilote, 1);
        //button1.whenPressed(new AspirerEngrenageCommand());
        button1.whileHeld(new AspirerEngrenageCommand());
        
        Button button2 = new JoystickButton(jPilote, 2);
        button2.whenPressed(new ArmUpCommand());
        
        Button button3 = new JoystickButton(jPilote, 3);
        button3.whenPressed(new ArmDownCommand());
        
        Button button4 = new JoystickButton(jPilote, 4);
        //button4.whenPressed(new RejeterEngrenageCommand());
        button4.whileHeld(new RejeterEngrenageCommand());
        
        Button button5 = new JoystickButton(jPilote, 5);
        //button5.whenPressed(new MonterGrimpeur());
        button5.whileHeld(new MonterGrimpeur());
        
        Button button6 = new JoystickButton(jPilote, 6);
        //button6.whenPressed(new DescendreGrimpeur());
        button6.whileHeld(new DescendreGrimpeur());
        
        Button button7 = new JoystickButton(jPilote, 7);
        button7.whenPressed(new ExtractPlaqueCommand());
        
        Button button8 = new JoystickButton(jPilote, 8);
        button8.whenPressed(new RetractPlaqueCommand());

        Button button9 = new JoystickButton(jPilote, 9);
        button9.whenPressed(new ArmDownCommand());
        
        Button button10 = new JoystickButton(jPilote, 10);
        button10.whenPressed(new ArmUpCommand());
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("deplacementJoystick", new deplacementJoystick());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJPilote() {
        return jPilote;
    }
    
    public double getJPiloteXAxis() {
        return jPilote.getRawAxis(0);
    }
    
    public double getJPiloteYAxis() {
        return jPilote.getRawAxis(1);
        
    }
    public double getfilteredJPiloteXAxis() {
    	return filterJoystickAxis(jPilote.getRawAxis(0));
    }
    public double getfilteredJPiloteYAxis() {
    	return filterJoystickAxis(jPilote.getRawAxis(1));
    }
    

    public Joystick getcoPilote() {
        return coPilote;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  }
    public double filterJoystickAxis(double inputAxis){
    	if ((inputAxis< -0.10)||(inputAxis >0.1)){
    		return inputAxis;
    	}
    	else {
    		return 0.0;
    	}
    }
    
    
}

